@using Dialogue.Logic.Application
@model Dialogue.Logic.Models.ViewModels.ViewPostViewModel
@{
    var postId = Model.Post.Id;
}
<div class="post row solution-@Model.Post.IsSolution.ToString().ToLower()" data-postid="@postId">
    <div class="postbody col-md-10">
        <a id="comment-@postId"></a>
        <div class="postbodytop">
            <span class="badge posttotalvotecount">@Model.Post.VoteCount.KiloFormat()</span> <a class="postmember-@postId" href="@Html.Raw(Model.Post.Member.Url)">@Html.Raw(Model.Post.Member.UserName)</a>
            @Html.Lang("Post.PostedThis")
            @DatesUI.GetPrettyDate(Model.Post.DateCreated.ToString())
            @if (Model.IsAdminOrMod && !string.IsNullOrEmpty(Model.Post.IpAddress))
            {
                <text> - @Model.Post.IpAddress</text>
            }
        </div>
        <div id="postcontent-@postId" class="postcontent">
            @if (Model.ShowTopicLinks)
            {
                <h3><a href="@Model.ParentTopic.Url#comment-@postId">@Model.ParentTopic.Name</a></h3>
            }

            @Html.Raw(AppHelpers.ConvertPostContent(Model.Post.PostContent))

            @if (Model.Post.DateEdited > Model.Post.DateCreated)
            {
                <p class="postlastedited">
                    @Html.Lang("Post.LastEdited")  @DatesUI.GetPrettyDate(Model.Post.DateEdited.ToString())
                </p>
            }
            <div class="post-actions">
                @if (Html.Settings().AllowPoints && Model.AllowedToVote)
                {
                    var hasVotedAlready = (Model.Votes.Any() && Model.Votes.Count(x => x.MemberId == Model.User.Id) > 0);
                    var disableClass = hasVotedAlready ? "disabled" : "";
                    <a class="pills vote @(disableClass)" data-postid="@postId" data-votetype="up">
                        <span>@Model.UpVotes.KiloFormat()</span> @Html.Lang("Post.VoteUp")
                    </a>
                    <a class="pills vote @(disableClass)" data-postid="@postId" data-votetype="down">
                        <span>@Model.DownVotes.KiloFormat()</span> @Html.Lang("Post.VoteDown")
                    </a>
                }
                else
                {
                    <a class="pills disabled">
                        <span>@Model.UpVotes.KiloFormat()</span> @Html.Lang("Post.VoteUp")
                    </a>
                    <a class="pills disabled">
                        <span>@Model.DownVotes.KiloFormat()</span> @Html.Lang("Post.VoteDown")
                    </a>
                }
                @if (!Model.Post.IsTopicStarter && Html.Settings().AllowPostsToBeMarkedAsSolution && Model.ParentTopic.MemberId == Model.LoggedOnMemberId)
                {
                    var showTick = !(Model.ParentTopic.Solved && !Model.Post.IsSolution);
                    if (showTick)
                    {
                        var isSolved = Model.ParentTopic.Solved ? "issolution-solved" : "issolution";
                        var isSolvedTitle = Model.ParentTopic.Solved ? Html.Lang("Post.AlreadySolved") : Html.Lang("Post.MarkAsSolution");
                        var isSolvedText = Model.ParentTopic.Solved ? Html.Lang("Post.Solution") : Html.Lang("Post.MarkAsSolution");
                        <a class="pills pills-green @isSolved" data-postid="@postId" title="@isSolvedTitle">
                            @if (Model.ParentTopic.Solved)
                            {
                                <span class="glyphicon glyphicon-ok"></span>
                            }
                            @isSolvedText
                        </a>
                    }
                }
                @if (User.Identity.IsAuthenticated && Model.Post.MemberId != Model.LoggedOnMemberId)
                {
                    <a class="pills pills-yellow favorite favorite-@Model.HasFavourited" data-postid="@postId">
                        <span class="glyphicon glyphicon-asterisk"></span> @(Model.HasFavourited ? Html.Lang("Post.Favourited") : Html.Lang("Post.Favourite"))
                    </a>
                }
            </div>
            @if (Html.Settings().AllowMemberSignatures && !string.IsNullOrEmpty(Model.Post.Member.Signature))
            {
                <div class="userpostsignature">@Html.Raw(AppHelpers.ConvertPostContent(Model.Post.Member.Signature))</div>
            }
        </div>
        @if (Model.Post.Files != null && Model.Post.Files.Any())
        {
            <p class="uploadfileheading">
                @Html.Lang("Post.FileUpoadedHeading")
            </p>
            <div class="postuploadedfilesholder clearfix">
                @foreach (var file in Model.Post.Files.OrderByDescending(o => o.DateCreated))
                {
                    <div class="fileupload pills pills-large">
                        <a href="@Html.Raw(Url.Content(file.FilePath))">@Html.Raw(file.FriendlyFilename)</a>
                        @if (Model.Post.Member.Id == Model.LoggedOnMemberId || User.IsInRole(AppConstants.AdminRoleName))
                        {
                            <span class="deleteupload" title="@Html.Lang("Post.Delete")">
                                <a href="@Urls.GenerateUrl(Urls.UrlType.FileDelete)?id=@file.Id ">
                                    <span class="glyphicon glyphicon-remove"></span>
                                </a>
                            </span>
                        }
                    </div>
                }
            </div>
        }
    </div>
    <div class="postinfo col-md-2">

        <a href="@Html.Raw(Model.Post.Member.Url)" class="postmemberavatar">
            <img src="@Model.Post.Member.MemberImage(AppConstants.GravatarPostSize)" alt="@Model.Post.Member.UserName" title="@Model.Post.Member.UserName">
        </a>

        <div class="postadminui">
            @if (Model.User != null)
            {

                if (Model.Post.Member.Id != Model.LoggedOnMemberId && Model.LoggedOnMemberId != 0 && Html.Settings().EnableSpamReporting)
                {
                    <a href="@Urls.GenerateUrl(Urls.UrlType.PostReport)?id=@Model.Post.Id" class="pills pills-full">@Html.Lang("Post.Report")</a>
                }
                if (Model.Post.Member.Id == Model.LoggedOnMemberId || Model.IsAdminOrMod)
                {
                    <a onclick="return confirm('@(Html.Lang("Post.DeleteConfirmation"))')" href="@Urls.GenerateUrl(Urls.UrlType.PostDelete)?id=@Model.Post.Id" class="pills pills-full">@Html.Lang("Post.Delete")</a>
                }
                if (Model.Post.Member.Id == Model.LoggedOnMemberId || Model.IsAdminOrMod)
                {
                    <a href="@Urls.GenerateUrl(Urls.UrlType.EditPost)?id=@Model.Post.Id" class="pills pills-full">@Html.Lang("Post.Edit")</a>
                }
                <a href="?quote=@Model.Post.Id#createpost" class="pills pills-full">@Html.Lang("Post.Quote")</a>
                if ((Model.Post.Member.Id == Model.LoggedOnMemberId && Model.Permissions[AppConstants.PermissionAttachFiles].IsTicked) || Model.IsAdminOrMod)
                {
                    if (Model.Post.Member.DisableFileUploads != true)
                    {
                        <a class="postshowattach pills pills-full" href="#">@Html.Lang("Post.Attach")</a>
                    }
                }

            }
        </div>
    </div>
    @if (!Model.IsTopicStarter)
    {
        <a href="@Model.ParentTopic.Url#comment-@postId" class="directpostlink">@Html.Lang("Post.DirectLink")</a>
    }

    @if ((Model.Permissions[AppConstants.PermissionAttachFiles].IsTicked && Model.Post.Member.DisableFileUploads != true) || Model.IsAdminOrMod)
    {
        <div class="postuploadholder row">
            @using (Html.BeginForm("UploadPostFiles", "DialogueUploadSurface", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-inline", role = "form" }))
                {
                <div class="col-md-12">
                    <span style="display: none;" class="ajaxspinner" title="@Html.Lang("Post.PleaseWait")">@Html.Lang("Post.PleaseWait")</span>
                    <div class="form-group">
                        <input type="file" name="files" id="files" value="" multiple="multiple" class="form-control" />
                        <input type="hidden" name="uploadPostId" id="uploadPostId" value="@Model.Post.Id" />
                    </div>
                    <button type="submit" class="btn btn-default postuploadbutton">@Html.Lang("Post.Upload")</button>
                </div>
                }
        </div>
    }
</div>